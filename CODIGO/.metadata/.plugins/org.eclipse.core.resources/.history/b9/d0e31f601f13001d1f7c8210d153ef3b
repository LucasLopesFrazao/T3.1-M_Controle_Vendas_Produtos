package controle;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;

import modelo.Cliente;

public class ControleCliente {
	
	//ATRIBUTOS
	private List<Cliente> clientes = new ArrayList<Cliente>();
	
	//CONSTRUTOR COM SEMEAÇÃO DO "BANCO DE DADOS".
	public ControleCliente() {
		clientes.add(new Cliente(1, "Marcelo Otávio Assis", "marcelo78@hersa.com.br", "353.559.630-05", "41306-065",
				"Salvador", "Vila das Margaridas", "229", "Nova Brasília de Valéria", "BA"));
		
		clientes.add(new Cliente(2, "Isadora Elaine", "isadora-elaine@foar.unesp.br", "619.021.645-55", "79790-970",
				"Deodápolis", "Avenida Dom Pedro II 530", "229", "Centro", "MS"));
		
		clientes.add(new Cliente(3, "Vera Brenda Barros", "vera_barros@leanclean.com.br", "428.047.520-20", "63901-110",
				"Quixadá", "Planalto Renascer", "865", "Rua da Criança", "CE"));
		
		clientes.add(new Cliente(4, "Luiz César Nelson da Costa", "luizcesardacosta@companhiadigital.net", "577.468.789-97", "96830-060",
				"Santa Cruz do Sul", "Rua Iguaçu", "963", "Bonfim", "RS"));
		
		clientes.add(new Cliente(5, "Bruna Francisca Rebeca Assis", "bruna.francisca@agencia10.com.br", "007.938.968-60", "68905-170",
				"Macapá", "Rua Santa Maria", "814", "Cidade Nova", "AP"));
	}
	
	//METODOS
	public Integer ultimoCodigoCadastrado() {		
		return clientes.get((clientes.size() - 1)).getId();
	}
	
	public Cliente pesquisarClientePorCPF(String cpf) {
		Cliente cliente = new Cliente();
		for(Cliente c: clientes) {
			if(c.getCpf().equals(cpf)) {
				cliente = c;
			}
		}
		return cliente;
	}
	
	public void excluirCliente(String cpf) {
		int loop = 0;
		for(Cliente c: clientes) {
			if(c.getCpf().equals(cpf)) {
					clientes.remove(loop);					
					break;
			}
			loop += 1;
		}
	}
	
	public void adicionarCliente(Cliente cliente) {
		clientes.add(cliente);
	}
	
	public List<Cliente> obterTodosClientes(){
		return clientes;
	}
	
	public boolean checarId(Integer id) {
		for(Cliente c: clientes) {
			if(c.getId() == id) {
				return true;
			}
		}
		return false;
	}
	
	public void editarCliente(Cliente cliente) {
		for(Cliente c: clientes) {
			if(c.getId() == cliente.getId()) {
				c.setId(cliente.getId());
				c.setNome(cliente.getNome());
				c.setEmail(cliente.getEmail());
				c.setCpf(cliente.getCpf());
				c.getEndereco().setCep(cliente.getEndereco().getCep());
				c.getEndereco().setCidade(cliente.getEndereco().getCidade());
				c.getEndereco().setEndereco(cliente.getEndereco().getEndereco());
				c.getEndereco().setNumero(cliente.getEndereco().getNumero());
				c.getEndereco().setBairro(cliente.getEndereco().getBairro());
				c.getEndereco().setUf(cliente.getEndereco().getUf());
				
			}
		}
	}
	
	public boolean validarCPF(String CPF) {
		// considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals("00000000000") ||
            CPF.equals("11111111111") ||
            CPF.equals("22222222222") || CPF.equals("33333333333") ||
            CPF.equals("44444444444") || CPF.equals("55555555555") ||
            CPF.equals("66666666666") || CPF.equals("77777777777") ||
            CPF.equals("88888888888") || CPF.equals("99999999999") ||
            (CPF.length() != 11))
            return(false);

        char dig10, dig11;
        int sm, i, r, num, peso;

        // "try" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0
        // (48 eh a posicao de '0' na tabela ASCII)
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico

        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);

        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10)))
                 return(true);
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
        }
	}
}
