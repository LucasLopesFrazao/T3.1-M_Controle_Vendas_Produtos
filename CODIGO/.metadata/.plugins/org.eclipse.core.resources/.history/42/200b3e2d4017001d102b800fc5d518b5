package controle;

import java.util.ArrayList;
import java.util.List;

import exceptions.EstoqueException;
import exceptions.IdProdutoException;
import modelo.Produto;

public class ControleProduto {
	
	//ATRIBUTOS
	List<Produto> produtos = new ArrayList<>();
	
	//CONSTRUTOR COM SEMEAÇÃO DO "BANCO DE DADOS".
	public ControleProduto() {
		
		//CELULARES
		produtos.add(new Produto(1, 8549.00, 100, "Galaxy S22 Ultra 5G Preto 256GB"));
		produtos.add(new Produto(2, 11519.00, 50, "Galaxy Z Fold3 5G Preto 512GB"));
		produtos.add(new Produto(3, 2699.00, 25, "Galaxy S21 FE 5G 128GB"));
		produtos.add(new Produto(4, 3319.00, 75, "iPhone 11 Apple (64GB) Preto "));
		produtos.add(new Produto(5, 9176.00, 15, "Iphone 13 PRO"));
	}
	
	//METODOS
	public Integer ultimoCodigoCadastrado() {
		return produtos.get((produtos.size() - 1)).getId();
	}
	
	public List<Produto> obterTodosProdutos(){
		return produtos;
	}
	
	public boolean checarId(Integer id) {
		for(Produto p: produtos) {
			if(p.getId() == id) {
				System.out.println("true");
				return true;
			}
		}
		return false;
	}
	
	public void editarProduto(Produto produto) {
		for(Produto p: produtos) {
			if(p.getId() == produto.getId()) {
				p.setId(produto.getId());
				p.setNome(produto.getNome());
				p.setPreco(produto.getPreco());
				p.setQtdEstoque(produto.getQtdEstoque());
			}
		}
	}
	
	public void adicionarProduto(Produto produto) {
		produtos.add(produto);
	}
	
	public Produto pesquisarProduto(String nome) {
		for(Produto p: produtos) {
			if(p.getNome().toUpperCase().contains(nome.toUpperCase())) {
				return p;
			}
		}
		return new Produto();
	}
	
	public Produto pesquisarProdutoId(Integer id) {
		for(Produto p: produtos) {
			if(p.getId() == id) {
				return p;
			}
		}
		return new Produto();
	}
	
	public void excluirProduto(Integer id) {
		int loop = 0;
		for(Produto p: produtos) {
			if(p.getId() == id) {
				produtos.remove(loop);
				break;
			}
			loop += 1;
		}
	}
	
	public void diminuirEstoque(Integer id, Integer qtd) throws EstoqueException {
		for(Produto p: produtos) {
			if(p.getId() == id) {
				if((p.getQtdEstoque() - qtd) < 0) {
					throw new EstoqueException("Quantidade em estoque insuficiente");
				}else {
					p.setQtdEstoque(p.getQtdEstoque() - qtd);					
				}
			}
		}
	}
	
	public void aumentarEstoque(Integer id, Integer qtd){
		for(Produto p: produtos) {
			if(p.getId() == id) {
				p.setQtdEstoque(p.getQtdEstoque() + qtd);					
			}
		}
	}
	
	public boolean checarIdNoSistema(Integer id) throws IdProdutoException {
		for(Produto p: produtos) {
			if(p.getId() == id) {
				return true;
			}
		}
		throw new IdProdutoException("Código inválido!");
	}
}
